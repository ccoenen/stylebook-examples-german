[{"kind":1,"language":"markdown","value":"# Flexbox\n\nFlexbox stands for flexible box and it is usually used to style smaller compontents. In contrast to grid, that is used for the overall layout.\n\nFlexbox is direction agnostic, that means you can define if it layout content vertically or horizontally. It gives the container the ability to control the size of its childs to expand items to fill the available space or shrink items to prevent them from overflow.\n\nIMAGE ABOUT TERMINOLOGY\n\nIMAGE ABOUT AXIS\n\nIn the following example we set up a flexbox **container** in HTML. The container have 3 **child-items**."},{"kind":2,"language":"html","value":"<main class=\"container\">\n  <div class=\"item1\">Item 1</div>\n  <div class=\"item2\">Item 2</div>\n  <div class=\"item3\">Item 3</div>\n</main>"},{"kind":1,"language":"markdown","value":"## Attributes for the container\n\nNext we need to setup the container. To do that, we use the `display` attribute and set it to `flex`."},{"kind":2,"language":"css","value":".container {\n  display: flex;\n}"},{"kind":1,"language":"markdown","value":"To visualize the changes a bit better, we will set different background colors to the 3 items."},{"kind":2,"language":"css","value":".item1 {\n  background-color: #ffb4ff;\n  color: #ffffff;\n}\n.item2 {\n  background-color: #fc8afc;\n  color: #ffffff;\n}\n.item3 {\n  background-color: #ff3cff;\n  color: #ffffff;\n}"},{"kind":1,"language":"markdown","value":"If you run the code, you can see that the layout has changed. The 3 items are now layed out in a row instead of a column. This is, because a flex container lays out it elements by default in a `row`.\n\n### `flex-direction`\n\nTo change this behavior, we can use the `flex-direction` attribute in the CSS. Possible values are `row`, which is the default, `row-reverse`, `column`, and `column-reverse`. If you like, you can play around with this values and see what changes."},{"kind":2,"language":"css","value":".container {\n  flex-direction: row;\n}"},{"kind":1,"language":"markdown","value":"For the following examples, we will use the `row` value for the `flex-direction`.\n\n### `flex-wrap`\n\nBy default, when items in a flex container are bigger than the container, they don't wrap. But if you want to, you can change this behavior. To do this, you can use the `flex-wrap` attribute. Possible values are `nowrap`, which is the default, `wrap`, and `wrap-reverse`."},{"kind":2,"language":"css","value":".container {\n  flex-wrap: nowrap;\n}"},{"kind":1,"language":"markdown","value":"### `flex-flow`\n\nIf you want to set both values, `flex-direction` and `flex-wrap`, in a shorthand syntax, you can use the `flex-flow` attribute. As first value you define the `flex-direction` you want to use, followed by a whitespace and the value for the `flex-wrap`. An example could be `flex-flow: column wrap`.\n\n### `gap`, `row-gap`, and `column-gap`\n\nIf you want to control the gap between items in a flex container, you can use the `gap` attribute. You can use it with one value, that will be used for the `row-gap` and the `column-gap` attribute, or you can set them individually, divided by a space. If you want to set only a single value, you can use the `row-gap` and `column-gap` attribute directly.\n\nThe gap acts like a minimum gap between items. If you have a bigger gap, for example thorugh the `justify-content` attribute, it will have no effect."},{"kind":2,"language":"css","value":".container {\n  gap: 4em;\n}"},{"kind":1,"language":"markdown","value":"### `justify-content`\n\nIf you want to control how the elements are aligned along the main axis, if the `flex-direction` is set to `row`, it is horizontally, otherwise vertically, you can use the `justify-content` attribute. Possible values are `flex-start`, `flex-end`, `start`, `end`, `left`, `right`, `center`, `space-between`, `space-around`, and `space-evenly`.\n\nTALK ABOUT THE VALUES"},{"kind":2,"language":"css","value":".container {\n  justify-content: space-between;\n}"},{"kind":1,"language":"markdown","value":"### `align-content`\n\nIf the `flex-wrap` value is set to `wrap` or `wrap-reverse`, you can control the alignment on the cross-axis. Possible values are `normal`, which is the default, `flex-start`, `flex-end`, `start`, `end`, `center`, `space-between`, `space-around`, `space-evenly`, and `stretch`."},{"kind":2,"language":"css","value":".container {\n  height: 10em;\n  flex-wrap: wrap;\n  align-content: flex-end;\n}"},{"kind":1,"language":"markdown","value":"### Reseting the values\n\nTo continue and learn about the attributes for the flex items, we will reset some values on our container element."},{"kind":2,"language":"css","value":".container {\n  flex-wrap: nowrap;\n}"},{"kind":1,"language":"markdown","value":"## Attributes for the flex items\n\n### `flex-grow`\n\nThe `flex-grow` attribute defines how much space an item is allowed to take up. The biggest value will get the most space. The default value is `0`."},{"kind":2,"language":"css","value":".item1 {\n  flex-grow: 2;\n}\n.item2 {\n  flex-grow: 1;\n}"},{"kind":1,"language":"markdown","value":"### `flex-basis`\n\nThe `flex-basis` attribute sets the preferred size of an item "},{"kind":2,"language":"css","value":".item1 {\n  flex-grow: 0;\n  flex-basis: 100%;\n}\n.item2 {\n  flex-grow: 0;\n  flex-basis: 10em;\n}\n.item3 {\n  flex-basis: 10em;\n}"},{"kind":1,"language":"markdown","value":"### `flex-shrink`\n\nThe `flex-shrink` attribute defines the opposite to the `flex-grow` attribute. The higher the value, the earlier the element will collapse.\n\nBefore we can check out an example, we have to reset the `flex-grow` attributes and set some fixed and relatives widths to the items."},{"kind":1,"language":"markdown","value":"If we set the `flex-shrink` attribute for `item2` and `item3` now to different values, we can see that the elements collapse earlier, depending on their `flex-shrink` value.\n\nIf you like, you can play around with this example, change the values, and see what happens."},{"kind":2,"language":"css","value":".item2 {\n  flex-shrink: 10;\n}\n.item3 {\n  flex-shrink: 2;\n}"},{"kind":1,"language":"markdown","value":"### `flex`"},{"kind":2,"language":"css","value":""},{"kind":1,"language":"markdown","value":"### `align-self`\n\nWith the `align-self` attribute, you can control the alignment on the cross-axis. Possible values are `flex-start`, `flex-end`, `start`, `end`, `center`, `space-between`, `space-around`, `space-evenly`, and `stretch`.\n\nYou can see, that by default, flex items will take up all available space along the cross-axis. By setting the `align-self` attribute, the element collapses to its own size."},{"kind":2,"language":"css","value":".container {\n  height: 10em;\n}\n.item2 {\n  align-self: flex-end;\n}"},{"kind":1,"language":"markdown","value":"### `order`"},{"kind":2,"language":"css","value":".item3 {\n  order: -1;\n}"}]